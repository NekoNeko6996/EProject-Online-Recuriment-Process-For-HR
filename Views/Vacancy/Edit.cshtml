@model Sem3EProjectOnlineCPFH.Models.Data.Vacancy

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Edit Vacancy";
    bool isClosed = Model.Status == "Closed"; // Kiểm tra trạng thái của Vacancy
}   
<div class="container mt-4">
    <h2 class="text-center mb-4">Edit Vacancy</h2>
    <div class="card shadow-sm">
        <div class="card-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                @Html.HiddenFor(model => model.VacancyId)

                <div class="mb-3">
                    @Html.LabelFor(model => model.Title, new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control", placeholder = "Enter vacancy title" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Description, new { @class = "form-label fw-bold" })
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 4, placeholder = "Enter job description" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.NumberOfPositions, new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(model => model.NumberOfPositions, new { @class = "form-control", type = "number", min = "1" })
                    @Html.ValidationMessageFor(model => model.NumberOfPositions, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.DepartmentId, "Department", new { @class = "form-label fw-bold" })
                    @Html.DropDownListFor(model => model.DepartmentId,
                        ViewBag.Departments as SelectList,
                        new { @class = "form-select select2" })
                    @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                </div>


                <div class="mb-3">
                    @Html.LabelFor(model => model.CreatedAt, new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(model => model.CreatedAt, new { @class = "form-control", type = "date", Value = Model.CreatedAt.ToString("yyyy-MM-dd"), @readonly = "readonly" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Status, new { @class = "form-label fw-bold" })
                    @Html.DropDownListFor(model => model.Status, new SelectList(new[]
                    {
                        new { Value = "Open", Text = "Open" },
                        new { Value = "Closed", Text = "Closed" },
                        new { Value = "Suspended", Text = "Suspended" }
                    }, "Value", "Text", Model.Status), "Select Status", new { @class = "form-select" })
                </div>

                <div class="alert alert-danger">
                    <p class="m-0">Be careful when changing the status to [Close], it cannot be undone.</p>
                </div>

                <div class="text-center">
                    @if (!isClosed)
                    {
                        <button type="submit" class="btn btn-primary px-4 me-2">Save</button>
                    }
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary px-4" })
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".select2").select2({
                placeholder: "Select a department",
                allowClear: true
            });
        });
    </script>
}
